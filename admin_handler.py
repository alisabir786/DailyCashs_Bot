from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import config

# Admin Panel Command
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id != config.OWNER_ID:
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶∞‡¶æ‡¶ñ‡ßá‡¶® ‡¶®‡¶æ‡•§")
        return

    await update.message.reply_text(
        "üõ†Ô∏è Welcome to Admin Panel",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã Withdraw Requests", callback_data="admin_withdraw_list")],
            [InlineKeyboardButton("üë• All Users", callback_data="admin_users")],
        ])
    )

# Approve / Reject Withdraw Requests
pending_withdraws = {}

async def list_withdraw_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text_lines = []

    for uid, user in config.USERS.items():
        if "withdraw_request" in user:
            w = user["withdraw_request"]
            text_lines.append(
                f"üßæ User: {uid}\nAmount: {w['amount']}\nCoin: {w['coin']}\nUPI: {w['upi']}"
            )
            pending_withdraws[str(uid)] = w

    if not text_lines:
        await query.edit_message_text("‚úÖ ‡¶ï‡ßã‡¶®‡ßã pending withdraw ‡¶®‡ßá‡¶á‡•§")
        return

    message = "\n\n".join(text_lines)
    buttons = [[
        InlineKeyboardButton("‚úÖ Approve", callback_data="admin_approve"),
        InlineKeyboardButton("‚ùå Reject", callback_data="admin_reject")
    ]]
    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(buttons))

# Approve Withdraw
async def approve_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    for uid in pending_withdraws:
        user = config.USERS[int(uid)]
        w = user["withdraw_request"]

        del user["withdraw_request"]
        await context.bot.send_message(
            chat_id=uid,
            text=f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ({w['amount']}) ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá approve ‡¶π‡ßü‡ßá‡¶õ‡ßá!\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§"
        )

    await query.edit_message_text("üéâ ‡¶∏‡¶¨ withdraw ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá approve ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    pending_withdraws.clear()

# Reject Withdraw
async def reject_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    for uid in pending_withdraws:
        user = config.USERS[int(uid)]
        w = user["withdraw_request"]

        del user["withdraw_request"]
        user["coins"] += w["coin"]

        await context.bot.send_message(
            chat_id=uid,
            text=f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ({w['amount']}) ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§\nCoin ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã‡•§"
        )

    await query.edit_message_text("üö´ ‡¶∏‡¶¨ withdraw ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    pending_withdraws.clear()
