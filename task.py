from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from data_manager import log_task, get_today_task_count, update_balance, get_user
from config import dp

# ЁЯОо ржЧрзЗржо ржЯрж╛рж╕рзНржХ (2+3 ржЯрж╛ржЗржк ржЧрзЗржо)
@dp.message_handler(commands=["game_task"])
async def game_task(message: types.Message):
    user_id = message.from_user.id
    count = get_today_task_count(user_id, "game")
    if count >= 5:
        await message.answer("тЭМ ржЖржкржирж┐ ржЖржЬржХрзЗрж░ ржЬржирзНржп рзлржЯрж┐ ржЧрзЗржо ржЯрж╛рж╕рзНржХ ржХржоржкрзНрж▓рж┐ржЯ ржХрж░рзЗ ржлрзЗрж▓рзЗржЫрзЗржиред")
        return

    await message.answer("ЁЯФв ржЧрзЗржо ржкрзНрж░рж╢рзНржи: 2 + 3 = ?\nржЙрждрзНрждрж░ ржжрж┐ржиред")

# ржЗржЙржЬрж╛рж░ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзЗ ржЙрждрзНрждрж░ ржжрж┐ржмрзЗ
@dp.message_handler(lambda message: message.text.strip().isdigit() and message.text.strip() in ["5", "рзл"])
async def check_game_answer(message: types.Message):
    user_id = message.from_user.id
    count = get_today_task_count(user_id, "game")
    if count >= 5:
        await message.answer("тЭМ ржЖржкржирж┐ ржЖржЬржХрзЗрж░ ржЬржирзНржп рзлржЯрж┐ ржЧрзЗржо ржЯрж╛рж╕рзНржХ ржХржоржкрзНрж▓рж┐ржЯ ржХрж░рзЗ ржлрзЗрж▓рзЗржЫрзЗржиред")
        return

    log_task(user_id, "game", 5)
    await message.answer("тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░! ржЖржкржирж┐ ржкрзЗрзЯрзЗржЫрзЗржи 5 ржХрзЯрзЗржи ЁЯОЙ")

# ЁЯОе ржнрж┐ржбрж┐ржУ ржЯрж╛рж╕рзНржХ (Watch video and reward)
@dp.message_handler(commands=["video_task"])
async def video_task(message: types.Message):
    user_id = message.from_user.id
    count = get_today_task_count(user_id, "video")
    if count >= 5:
        await message.answer("тЭМ ржЖржкржирж┐ ржЖржЬржХрзЗрж░ ржЬржирзНржп рзлржЯрж┐ ржнрж┐ржбрж┐ржУ ржЯрж╛рж╕рзНржХ ржХрж░рзЗ ржлрзЗрж▓рзЗржЫрзЗржиред")
        return

    # ржнрж┐ржбрж┐ржУ ржмрж╛ рж▓рж┐ржЩрзНржХ ржкрж╛ржарж╛ржирзЛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("ЁЯОм ржнрж┐ржбрж┐ржУ ржжрзЗржЦрзЗржЫрж┐ тЬЕ", callback_data="video_done")
    )
    await message.answer("тЦ╢я╕П ржирж┐ржЪрзЗрж░ ржнрж┐ржбрж┐ржУржЯрж┐ ржжрзЗржЦрзБржи:\n\nhttps://youtu.be/dQw4w9WgXcQ", reply_markup=markup)

@dp.callback_query_handler(lambda call: call.data == "video_done")
async def video_done_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    count = get_today_task_count(user_id, "video")
    if count >= 5:
        await call.message.edit_text("тЭМ ржЖржкржирж┐ ржЖржЬржХрзЗрж░ ржЬржирзНржп рзлржЯрж┐ ржнрж┐ржбрж┐ржУ ржЯрж╛рж╕рзНржХ ржХржоржкрзНрж▓рж┐ржЯ ржХрж░рзЗ ржлрзЗрж▓рзЗржЫрзЗржиред")
        return

    log_task(user_id, "video", 5)
    await call.message.edit_text("ЁЯОЙ ржзржирзНржпржмрж╛ржж! ржЖржкржирж┐ ржнрж┐ржбрж┐ржУ ржжрзЗржЦрж╛рж░ ржЬржирзНржп 5 ржХрзЯрзЗржи ржкрзЗрзЯрзЗржЫрзЗржиред")

# ЁЯСе рж░рзЗржлрж╛рж░ ржЯрж╛рж╕рзНржХ (Refer friend)
@dp.message_handler(commands=["refer"])
async def refer_task(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    username = message.from_user.username or "your_telegram_id"
    invite_link = f"https://t.me/DailyCashs_Bot?start={user_id}"

    await message.answer(
        f"ЁЯСе *рж░рзЗржлрж╛рж░ ржУ ржЖрж░рзНржи ржХрж░рзБржи!*\n\n"
        f"тЮХ ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ ржкрж╛ржмрзЗржи: 10 ржХрзЯрзЗржи\n"
        f"ЁЯОБ рж░рзЗржлрж╛рж░ ржХрж░рж╛ ржЗржЙржЬрж╛рж░ ржЗржиржХрж╛ржо ржХрж░рж▓рзЗ ржкрж╛ржмрзЗржи 10% рж▓рж╛ржЗржлржЯрж╛ржЗржо ржмрзЛржирж╛рж╕\n\n"
        f"ЁЯФЧ ржЖржкржирж╛рж░ рж▓рж┐ржЩрзНржХ:\n`{invite_link}`\n\n"
        f"ЁЯУв рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржи ржмржирзНржзрзБржжрзЗрж░ ржорж╛ржЭрзЗ!",
        parse_mode="Markdown"
    )
    
