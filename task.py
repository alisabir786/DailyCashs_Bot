# task.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import config
import random

# ЁЯОо Game Task
async def show_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("ЁЯзо Game", callback_data="game_task")],
        [InlineKeyboardButton("ЁЯОе Watch Video", callback_data="video_task")],
        [InlineKeyboardButton("ЁЯСе Refer & Earn", callback_data="refer_task")],
        [InlineKeyboardButton("ЁЯПа ржорзЗржЗржи ржорзЗржирзБ", callback_data="open_menu")]
    ]

    await query.edit_message_text(
        text="ЁЯзй ржЯрж╛рж╕рзНржХ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ЁЯзо Game Task
questions = [
    {"q": "2 + 3 = ?", "a": "5"},
    {"q": "4 + 6 = ?", "a": "10"},
    {"q": "7 - 4 = ?", "a": "3"},
    {"q": "3 x 2 = ?", "a": "6"},
    {"q": "10 ├╖ 2 = ?", "a": "5"},
]

async def game_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    question = random.choice(questions)
    context.user_data["current_question"] = question

    await context.bot.send_message(
        chat_id=user_id,
        text=f"ЁЯза ржкрзНрж░рж╢рзНржи: {question['q']}\nржЙрждрзНрждрж░ ржжрж┐ржи ржирж┐ржЪрзЗ рж▓рж┐ржЦрзЗ:",
    )

async def handle_game_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if "current_question" not in context.user_data:
        return

    correct_answer = context.user_data["current_question"]["a"]

    if text == correct_answer:
        config.USERS[user_id]["coins"] += config.GAME_REWARD
        await update.message.reply_text(f"тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░! ржЖржкржирж┐ {config.GAME_REWARD} ржХрзЯрзЗржи ржкрзЗрж▓рзЗржи ЁЯОЙ")
    else:
        await update.message.reply_text("тЭМ ржнрзБрж▓ ржЙрждрзНрждрж░! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

    context.user_data.pop("current_question", None)

# ЁЯОе Watch Video Task
video_links = [
    "https://youtu.be/dQw4w9WgXcQ",
    "https://youtu.be/9bZkp7q19f0",
    "https://youtu.be/flex-video-1",
    "https://youtu.be/flex-video-2",
    "https://youtu.be/flex-video-3"
]

async def video_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    links = "\n".join([f"ЁЯОе {i+1}. {link}" for i, link in enumerate(video_links)])
    config.USERS[user_id]["coins"] += config.VIDEO_REWARD * len(video_links)

    await query.edit_message_text(
        text=f"{links}\n\nтЬЕ ржнрж┐ржбрж┐ржУржЧрзБрж▓рзЛ ржжрзЗржЦрзЗ ржЖржкржирж┐ {config.VIDEO_REWARD * len(video_links)} ржХрзЯрзЗржи ржкрзЗрзЯрзЗржЫрзЗржи!"
    )

# ЁЯСе Refer & Earn
async def refer_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_id = user.id

    refer_link = f"https://t.me/{config.BOT_USERNAME}?start={user_id}"
    total_refers = len(config.USERS[user_id].get("referrals", []))
    total_earn = total_refers * config.REFER_REWARD

    await query.edit_message_text(
        text=(
            "ЁЯСе *Refer & Earn*\n\n"
            f"ЁЯФЧ ржЖржкржирж╛рж░ рж▓рж┐ржВржХ: `{refer_link}`\n"
            f"ЁЯТ░ ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░: {config.REFER_REWARD} ржХрзЯрзЗржи + рж▓рж╛ржЗржлржЯрж╛ржЗржо {int(config.REFER_PERCENT * 100)}%\n"
            f"ЁЯСл ржорзЛржЯ рж░рзЗржлрж╛рж░: {total_refers} ржЬржи\n"
            f"ЁЯкЩ ржЖрж░рзНржи: {total_earn} ржХрзЯрзЗржи\n"
        ),
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЧ рж▓рж┐ржВржХ ржХржкрж┐", url=refer_link)],
            [InlineKeyboardButton("ЁЯПа ржорзЗржЗржи ржорзЗржирзБ", callback_data="open_menu")]
        ])
    )
    
def add_referral_bonus(user_id, coin_amount):
    for uid, data in config.USERS.items():
        if user_id in data["referrals"]:
            bonus = int(coin_amount * config.REFER_PERCENT)
            data["coins"] += bonus
add_referral_bonus(user_id, coin_amount)
# ржпрзЗржЦрж╛ржирзЗржЗ ржЗржЙржЬрж╛рж░ ржЗржиржХрж╛ржо ржХрж░рзЗ, ржирж┐ржЪрзЗрж░ ржХрзЛржбржЯрж╛ ржпрзЛржЧ ржХрж░рзЛ
income = 5  # ржЗржЙржЬрж╛рж░ ржЗржиржХрж╛ржо ржХрж░рж▓ 5 coin
config.USERS[user_id]["coins"] += income

# рж░рзЗржлрж╛рж░рж╛рж░ ржерж╛ржХрж▓рзЗ рждрж╛ржХрзЗ 10% ржмрзЛржирж╛рж╕ ржжрж╛ржУ
for referrer_id, data in config.USERS.items():
    if user_id in data.get("referrals", []):
        bonus = int(income * 0.1)
        data["coins"] += bonus
        data["ref_bonus"] = data.get("ref_bonus", 0) + bonus
