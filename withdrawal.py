# withdrawal.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import config

AWAITING_UPI, AWAITING_AMOUNT = range(2)

# Step 1Ô∏è‚É£: Show Withdraw Menu
async def show_withdrawal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.delete()
    await query.message.reply_text("üíµ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ UPI ID ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: yourname@upi):")
    return AWAITING_UPI

# Step 2Ô∏è‚É£: UPI Save
async def get_upi_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    upi = update.message.text.strip()
    context.user_data["upi"] = upi

    keyboard = [
        [InlineKeyboardButton("‚Çπ100 (2000 coin)", callback_data="withdraw_100")],
        [InlineKeyboardButton("‚Çπ300 (6000 coin)", callback_data="withdraw_300")],
        [InlineKeyboardButton("‚Çπ500 (10000 coin)", callback_data="withdraw_500")],
        [InlineKeyboardButton("‚Çπ1000 (20000 coin)", callback_data="withdraw_1000")]
    ]
    await update.message.reply_text(
        "‚úÖ UPI ID ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return AWAITING_AMOUNT

# Step 3Ô∏è‚É£: Handle Amount Selection
async def process_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    coins = config.USERS[user_id]["coins"]

    amount_map = {
        "withdraw_100": (100, 2000),
        "withdraw_300": (300, 6000),
        "withdraw_500": (500, 10000),
        "withdraw_1000": (1000, 20000)
    }

    selected = query.data
    amount, required_coins = amount_map[selected]

    if coins < required_coins:
        await query.answer("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á!", show_alert=True)
        return ConversationHandler.END

    config.USERS[user_id]["coins"] -= required_coins
    upi = context.user_data.get("upi")

    await query.message.edit_text(
        f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‚Çπ{amount} ‡¶è‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\n"
        f"üßæ UPI: `{upi}`\n"
        f"‚è≥ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡ß®‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    )

    # Notify Admin (Future improvement: Send to OWNER_ID)
    owner_id = config.OWNER_ID
    try:
        await context.bot.send_message(
            chat_id=owner_id,
            text=(
                f"üîî ‡¶®‡¶§‡ßÅ‡¶® Withdrawal ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß:\n\n"
                f"üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {query.from_user.first_name} (@{query.from_user.username})\n"
                f"üÜî ID: {user_id}\n"
                f"üí∞ Amount: ‚Çπ{amount}\n"
                f"üíµ UPI: {upi}"
            )
        )
    except:
        pass

    return ConversationHandler.END
    
