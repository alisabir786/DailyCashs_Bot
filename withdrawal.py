from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from data_manager import get_balance, update_balance
from config import dp

# ‚úÖ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
class WithdrawState(StatesGroup):
    waiting_for_upi = State()
    waiting_for_amount = State()

# ‚úÖ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∂‡ßÅ‡¶∞‡ßÅ
@dp.message_handler(commands=['withdraw'])
async def start_withdrawal(message: types.Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    if balance < 2000:
        await message.answer("‚ùå ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶Ö‡¶®‡ßç‡¶§‡¶§ 2000 ‡¶ï‡ßü‡ßá‡¶® ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá‡•§")
        return

    await message.answer("üí≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ UPI ID ‡¶¶‡¶ø‡¶®:")
    await WithdrawState.waiting_for_upi.set()

# ‚úÖ UPI ‡¶ó‡ßç‡¶∞‡¶π‡¶£
@dp.message_handler(state=WithdrawState.waiting_for_upi)
async def receive_upi(message: types.Message, state: FSMContext):
    upi = message.text.strip()
    if "@" not in upi:
        await message.answer("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï UPI ID ‡¶¶‡¶ø‡¶® (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: yourupi@bank):")
        return

    await state.update_data(upi=upi)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚Çπ100 (2000 ‡¶ï‡ßü‡ßá‡¶®)", "‚Çπ300 (6000 ‡¶ï‡ßü‡ßá‡¶®)", "‚Çπ500 (10000 ‡¶ï‡ßü‡ßá‡¶®)", "‚Çπ1000 (20000 ‡¶ï‡ßü‡ßá‡¶®)")
    await message.answer("üî¢ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶§‡ßÅ‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?\n\n‡¶Æ‡¶ø‡¶® 2000 ‡¶ï‡ßü‡ßá‡¶® = ‚Çπ100", reply_markup=markup)
    await WithdrawState.waiting_for_amount.set()

# ‚úÖ Amount ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ì ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ
@dp.message_handler(state=WithdrawState.waiting_for_amount)
async def receive_amount(message: types.Message, state: FSMContext):
    amount_map = {
        "‚Çπ100 (2000 ‡¶ï‡ßü‡ßá‡¶®)": 2000,
        "‚Çπ300 (6000 ‡¶ï‡ßü‡ßá‡¶®)": 6000,
        "‚Çπ500 (10000 ‡¶ï‡ßü‡ßá‡¶®)": 10000,
        "‚Çπ1000 (20000 ‡¶ï‡ßü‡ßá‡¶®)": 20000
    }

    coins_required = amount_map.get(message.text)
    if coins_required is None:
        await message.answer("‚ùå ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§")
        return

    user_id = message.from_user.id
    balance = get_balance(user_id)
    if balance < coins_required:
        await message.answer("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶ï‡ßü‡ßá‡¶® ‡¶®‡ßá‡¶á‡•§")
        return

    data = await state.get_data()
    upi_id = data["upi"]

    # ‡¶ï‡ßü‡ßá‡¶® ‡¶ï‡ßá‡¶ü‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    update_balance(user_id, -coins_required)

    await message.answer(
        f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!\n\n"
        f"üí≥ UPI: `{upi_id}`\n"
        f"üí∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü: {message.text}\n\n"
        "‚è≥ 24 ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶¨‡ßá‡•§",
        parse_mode="Markdown"
    )

    # ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á (‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßá ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡¶∞‡ßã)
    await dp.bot.send_message(
        6955653010,  # Admin/User ID
        f"üì• ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡¶æ‡¶≤ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü:\n\nüë§ User: {message.from_user.full_name}\nüÜî ID: {user_id}\nüí≥ UPI: {upi_id}\nüí∞ Amount: {message.text}"
    )

    await state.finish()
    
