# profile.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

import config

AWAITING_NAME, AWAITING_PHOTO = range(2)

# Step 1я╕ПтГг: Show Profile Info
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    user_data = config.USERS[user.id]

    profile_text = (
        f"ЁЯСд <b>ржкрзНрж░рзЛржлрж╛ржЗрж▓</b>\n\n"
        f"ЁЯЖФ <b>User ID:</b> <code>{user.id}</code>\n"
        f"ЁЯУЫ <b>Name:</b> {user_data.get('first_name', 'N/A')}\n"
        f"ЁЯТ░ <b>Coins:</b> {user_data.get('coins', 0)}\n"
    )

    buttons = [
        [InlineKeyboardButton("тЬПя╕П Edit Name", callback_data="edit_name")],
        [InlineKeyboardButton("ЁЯЦ╝я╕П Edit Photo", callback_data="edit_photo")],
        [InlineKeyboardButton("ЁЯФР Privacy Policy", callback_data="privacy")],
        [InlineKeyboardButton("тД╣я╕П About", callback_data="about")],
        [InlineKeyboardButton("тмЕя╕П Back", callback_data="open_menu")]
    ]

    await query.message.edit_text(
        profile_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# Step 2я╕ПтГг: Edit Name
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.delete()
    await query.message.reply_text("тЬПя╕П ржирждрзБржи ржирж╛ржо рж▓рж┐ржЦрзБржи:")
    return AWAITING_NAME

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    config.USERS[update.effective_user.id]["first_name"] = name
    await update.message.reply_text("тЬЕ ржирж╛ржо рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗред")
    return ConversationHandler.END

# Step 3я╕ПтГг: Edit Photo
async def ask_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.delete()
    await query.message.reply_text("ЁЯУ╕ ржПржХржЯрж┐ ржЫржмрж┐ ржкрж╛ржарж╛ржи (Profile Photo рж╣рж┐рж╕рзЗржмрзЗ ржмрзНржпржмрж╣рж╛рж░ рж╣ржмрзЗ):")
    return AWAITING_PHOTO

async def save_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    file_path = f"profile_pics/{user_id}.jpg"
    await file.download_to_drive(file_path)

    config.USERS[user_id]["profile_photo"] = file_path
    await update.message.reply_text("тЬЕ ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЫржмрж┐ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗред")
    return ConversationHandler.END

# Step 4я╕ПтГг: Privacy & About
async def show_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.edit_text(
        "ЁЯФР <b>Privacy Policy</b>\n\nржЖржкржирж╛рж░ рждржерзНржп рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржк ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп рж░рж╛ржЦрж╛ рж╣ржпрж╝ред ржЕржирзНржп ржХрж╛рж░рзЛ рж╕рж╛ржерзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ ржирж╛ред",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("тмЕя╕П Back", callback_data="profile")]])
    )

async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.edit_text(
        "тД╣я╕П <b>About</b>\n\nржПржЗ ржЕрзНржпрж╛ржкржЯрж┐ ржЧрзЗржо, ржнрж┐ржбрж┐ржУ, рж╕рзНржкрж┐ржи ржУ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзЗ ржЖржпрж╝ ржХрж░рж╛рж░ ржЬржирзНржп рждрзИрж░рж┐ред Made by @Sabirdigital",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("тмЕя╕П Back", callback_data="profile")]])
    )
    
