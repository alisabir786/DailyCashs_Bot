# main.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import config

# Welcome Keyboard
def get_welcome_keyboard():
    keyboard = [
        [InlineKeyboardButton("тЦ╢я╕П Play", callback_data="open_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# Menu Keyboard
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("ЁЯТ░ Wallet", callback_data="wallet"),
         InlineKeyboardButton("ЁЯСд Profile", callback_data="profile")],
        [InlineKeyboardButton("ЁЯУЕ Daily Check-in", callback_data="daily_checkin")],
        [InlineKeyboardButton("ЁЯОп Spin", callback_data="spin")],
        [InlineKeyboardButton("ЁЯУЭ Tasks", callback_data="tasks")],
        [InlineKeyboardButton("тЪЩя╕П Profile Settings", callback_data="profile_settings")],
        [InlineKeyboardButton("ЁЯТ╡ Withdraw", callback_data="withdraw")]
    ]
    return InlineKeyboardMarkup(keyboard)

# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    # ржЗржЙржЬрж╛рж░ ржпржжрж┐ ржирждрзБржи рж╣рзЯ, ржЗржЙржЬрж╛рж░ ржпрзБржХрзНржд ржХрж░рзЛ
    if user.id not in config.USERS:
        config.USERS[user.id] = {
            "first_name": user.first_name,
            "last_name": user.last_name,
            "username": user.username,
            "coins": 0,
            "daily_day": 0,
            "referrals": [],
            "profile_photo": None
        }

    welcome_text = (
        f"ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ {user.first_name}!\n\n"
        "ЁЯОо ржЧрзЗржо ржЦрзЗрж▓рзЗ, рж╕рзНржкрж┐ржи ржХрж░рзЗ, ржЯрж╛рж╕рзНржХ ржХржоржкрзНрж▓рж┐ржЯ ржХрж░рзЗ ржЯрж╛ржХрж╛ ржЗржиржХрж╛ржо ржХрж░рзБржи!\n"
        "ЁЯСЗ ржирж┐ржЪрзЗрж░ Play ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЬржирзНржп:"
    )
    await context.bot.send_photo(
        chat_id=chat_id,
        photo="https://i.ibb.co/3cnfGR0/welcome-image.png",  # ржПржХржЯрж╛ ржУрзЯрзЗрж▓ржХрж╛ржо ржЗржорзЗржЬ URL (рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ ржХрж╛рж╕рзНржЯржо ржжрж┐рждрзЗ ржкрж╛рж░рзЛ)
        caption=welcome_text,
        reply_markup=get_welcome_keyboard()
    )

# Callback handler
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "open_menu":
        await query.edit_message_caption(
            caption="ЁЯПа ржорзЗржЗржи ржорзЗржирзБ ржЦрзБрж▓рзЗржЫрзЗ, ржирж┐ржЪ ржерзЗржХрзЗ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи:",
            reply_markup=get_main_menu()
        )
    elif query.data == "wallet":
        await query.edit_message_text("ЁЯкЩ ржУрзЯрж╛рж▓рзЗржЯ рж╕рж┐рж╕рзНржЯрзЗржо рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")
    elif query.data == "profile":
        await query.edit_message_text("ЁЯСд ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")
    elif query.data == "daily_checkin":
        await query.edit_message_text("ЁЯУЕ ржбрзЗржЗрж▓рж┐ ржЪрзЗржХржЗржи рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")
    elif query.data == "spin":
        await query.edit_message_text("ЁЯОп рж╕рзНржкрж┐ржи рж╕рж┐рж╕рзНржЯрзЗржо рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")
    elif query.data == "tasks":
        await query.edit_message_text("ЁЯУЭ ржЯрж╛рж╕рзНржХ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")
    elif query.data == "profile_settings":
        await query.edit_message_text("тЪЩя╕П ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯрж┐ржВрж╕ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")
    elif query.data == "withdraw":
        await query.edit_message_text("ЁЯТ╡ ржЙржЗржержбрзНрж░ рж╕рж┐рж╕рзНржЯрзЗржо рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...")

# Bot рж░рж╛ржи ржХрж░рж╛ржирзЛ
def run_bot():
    app = ApplicationBuilder().token(config.BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))

    print("тЬЕ Bot is running...")
    app.run_polling()

# Main entry
if __name__ == "__main__":
    run_bot()
  
